"""Program to pull the comments out of an ida-dissasembled program"""

__author__ = "Aaron Gonzales, Andres Ruiz"
__license__ = "Apache"
__email__ = "agonzales@cs.unm.edu"


import sys
import re
import pymongo as pm


def open_asm(filename):
    """Reads all the lines in an assembly file correctly.
    Args: 
        filename (str): the hash name of the file. e.g., "haa4945azkda09", no
                        path or extension
        returns:
            a list of all the decoded strings in bytecode format
    """
    # datapath = '/Users/carlyhendrickson/git/microsoft_malware_challenge/data/train/' + filename + '.asm'
    datapath = filename + '.asm'
    try :
        with open(datapath, 'rb') as f:
            asm = [line for line in f.readlines()]
            return asm
    except FileNotFoundError as fnfe:
        sys.stderr.write("Couldn't read file %s. Skipping\n" % datapath)
        return ''


def to_utf(line):
    """Converts a bytecode string to unicode. Ignores lines that have unicode
    decode errors.
    Args:
        line (string) a single line in the file
    Returns:
        a single line that's been cleaned
    """
    utf_line = ''
    try:
        utf_line = str(line, 'utf8')
        return utf_line
    except UnicodeDecodeError as u:
        # print(u)
        return None


def read_assembly(filename):
    """ Reads an assembly file and returns a nice UTF version of it.
    Args:
        filename (str) root of the file's filename, no extension
    Returns:
        list of all lines in the file
    """
    my_asm = open_asm(filename)
    asm = [to_utf(line) for line in my_asm]
    return asm


def filter_comments(asm_utf):
    """Filters over an assembly file and gives the IDA pro comments
    Requires a UTF8 set of strings."""
    comments = []
    # removes nones
    a = list(filter(lambda x: x != None, asm_utf))
    # splits on comment token
    comments = [re.split(";", line) for line in a]
    # takes only those that have a comment token
    comments = list(filter(lambda x: len(x) > 1, comments))
    # strips the whitespace from those tokens
    comments = [line[1].strip() for line in comments]
    # removes the singleton chars
    comments = list(filter(lambda x: len(x) > 1, comments))
    # regex to remove section markers and extraneous tabs
    # left over by poor reading of files
    comments = [re.sub('([-=].*[-=]|\t)', '', line) for line in comments]
    comments = list(filter(lambda x: x != '', comments))
    return comments


def main():
    db_address = "afruizc-office.cs.unm.edu"
    username = 'populator'
    password = 'malware_challenge'

    mg = pm.MongoClient(db_address)
    if not mg.malware.authenticate(username, password):
        sys.stderr.write("Authentication error. Terminating...")
        sys.stderr.flush()
    # Obtain the collection
    samples = mg.malware.samples

    names = [post['id'] for post in samples.find({'id': {'$exists' : True}})]

    for name in names:
        print ('Saving document %s...' % name)
        asm = open_asm(name)
        asm = [to_utf(line) for line in asm]
        comments = filter_comments(asm)
        samples.update({'id': name},
                       {"$set": {"ida_comments": comments}})

if __name__ == '__main__':
    main()
