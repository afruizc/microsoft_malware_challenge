"""Program to pull the comments out of an ida-dissasembled program"""

__author__ = "Aaron Gonzales, Andres Ruiz"
__license__ = "Apache"
__email__ = "agonzales@cs.unm.edu"

import os, re
import glob
import argparse
import multiprocessing

from joblib import delayed, Parallel

from asm_utils import open_asm, to_utf, get_collection

collection = None

def filter_comments(asm_utf):
    """Filters over an assembly file and gives the IDA pro comments
    Requires a UTF8 set of strings."""
    comments = []
    # removes nones
    a = filter(lambda x: x != None, asm_utf)
    # splits on comment token
    comments = [re.split(";", line) for line in a]
    # takes only those that have a comment token
    comments = list(filter(lambda x: len(x) > 1, comments))
    # strips the whitespace from those tokens
    comments = [line[1].strip() for line in comments]
    # removes the singleton chars
    comments = list(filter(lambda x: len(x) > 1, comments))
    # regex to remove section markers and extraneous tabs
    # left over by poor reading of files
    comments = [re.sub('([-=].*[-=]|\t)', '', line) for line in comments]
    comments = list(filter(lambda x: x != '', comments))
    return comments

def save_comments(doc):
    """
    Extracts the comments from the file
    and saves them in the document `doc`
    """
    global collection
    if doc.get('ida_comments', ''):
        print('Comments already extracted for document [%s], skipping.' %
                        doc['id'])
    else:
        print('Saving comments for document [%s].' % doc['id'])
        asm = open_asm(doc['id'])
        asm = [to_utf(line) for line in asm]
        comments = filter_comments(asm)
        doc['ida_comments'] = comments
        collection.save(doc)

def save_local_files(name_file):
    """
    Saves the comments of the dataset into the database.
    This one operates based on the files that are in your
    directory.

    Arguments:
    `name_file`: Name of the file to be saved on the database.
    """
    global collection
    name_file = name_file.split('.')[0]
    document = collection.find({'id': name_file})
    if document.count() > 0 and document[0].get('ida_comments', ''):
        print('Comments already extracted for document [%s], skipping.' %
               document[0]['id'])
        return
    if document.count() == 0:
        document = {
                'id': name_file,
                'ida_comments': []}
    else:
        document = document[0]
    print('Saving comments for document [%s].' % document['id'])
    asm = open_asm2(document['id'])
    asm = [to_utf(line) for line in asm]
    comments = filter_comments(asm)
    document['ida_comments'] = comments
    collection.save(document)

def main():
    """
    Inserts comments extracted from the asm files into
    the mongo database. It takes to argv:
        -. Directory in which the files are stored. Due to a bug
           This always has to be '.', i.e., the script should
           be run from where the files are saved.
        -. Collection, which is a string that indicates the
           collection to use
    """
    global collection
    args = argparse.ArgumentParser()
    args.add_argument('directory', help='Directory in which the files'
            'are stored.')
    args.add_argument('collection', help='The collection to use.')
    parser = args.parse_args()
    collection = get_collection(collection=parser.collection)
    documents = glob.glob('*.asm')
    num_cores = multiprocessing.cpu_count()
    print('Running code on %d processors' % num_cores)
    Parallel(n_jobs=num_cores)(\
                delayed(save_local_files)(doc) for doc in documents)

if __name__ == '__main__':
    main()
