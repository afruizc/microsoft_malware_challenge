"""Program to pull the sequence of assembly instructions
from a deconstructed IDA pro file. Works in roughly 100-300ms per file.
Multithreaded for fun. Minor quirks that could be fixed with args..."""

import asm_utils
import sys
from joblib import Parallel, delayed
import multiprocessing


samples = asm_utils.get_collection(collection='test_samples')

""" Makes a dictionary of the instructions for O(1) access to instructions.
This makes a huge improvement in the program speed"""
with open('asm_instructions.csv', 'r') as f:
    # asm_instr = [line.strip() for line in f.readlines()]
    asm_instr = {line.strip():'true' for line in f.readlines() }


def make_asm_info(post):
    """Takes a mongodb post and inserts information about it's assembly
        code in it"""
    asm = asm_utils.read_assembly(post['id'])
    instr_seq = asm_utils.get_inst(asm, asm_instr)
    post['asm_info'] = asm_utils.asm_seq_info(instr_seq)
    samples.save(post)




def _make_asm_info(doc):
    """Helper function that allows us to do Parallel for the model"""
    if 'asm_info' in doc.keys():
        print('%s already extracted; skipping' % doc['id'])
    else:
        print('extracting assembly info for %s' % doc['id'])
        try :
            make_asm_info(doc)
        except FileNotFoundError as fnfe:
            sys.stderr.write("Couldn't read file %s. Skipping\n" % doc['id'])
            pass


documents = samples.find()

num_cores = multiprocessing.cpu_count()

Parallel(n_jobs=num_cores)(delayed(_make_asm_info)(doc)for doc in documents)

# for doc in documents:
    # _make_asm_info(doc)
