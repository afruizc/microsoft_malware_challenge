"""Program to get a random sample from the training set."""

__author__ = "Aaron Gonzales"
__license__ = "Apache"
__email__ = "agonzales@cs.unm.edu"

import asm_utils
import multiprocessing
import pymongo as pm
from joblib import delayed, Parallel
import random




def rand_samp(documents, n=50):
    samp_size = documents.count()
    if n > samp_size:
        n = samp_size
    _random = random.sample(range(50), n)
    rands = []
    # for i, doc in enumerate(documents):
    #    if i in _random:
    #        rands.append(doc['id'])
    # return rands  
    return [doc['id'] for i, doc in enumerate(documents) if i in _random]


def clone_doc(namelist, f_collection, to_collection):
    for name in namelist:
        p = f_collection.find_one({'id': name})
        to_collection.drop({'id': name})
        to_collection.insert(p)
        print('inserted %s to %s' % (p['id'], str(to_collection)))


def _clone_docs(label, samples, reduced):
    documents = samples.find({'class': str(label)})
    rand = rand_samp(documents)
    clone_doc(rand, samples, reduced)


def main():
    db_address = "afruizc-office.cs.unm.edu"
    username = 'populator'
    password = 'malware_challenge'

    mg = pm.MongoClient(db_address)
    if not mg.malware.authenticate(username, password):
        sys.stderr.write("Authentication error. Terminating...")
        sys.stderr.flush()
        

    # Obtain the collection

    reduced = mg.malware.reduced
    samples = mg.malware.samples

    for label in range(1,10):
        _clone_docs(label, samples, reduced)
    



if __name__ == '__main__':
    main()
