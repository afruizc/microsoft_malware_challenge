"""Program to pull the better comments out of 
the already-extracted comments"""

__author__ = "Aaron Gonzales"
__license__ = "Apache"
__email__ = "agonzales@cs.unm.edu"

import asm_utils
import multiprocessing
from joblib import delayed, Parallel


def get_calls(comments):
    call_dict = {}
    calls = {'__stdcall', '__cdecl', '__fastcall', '__thiscall'}
    fcalls = [line for line in comments for word in line.split()
              if word in calls]
    call_dict['calls'] = fcalls
    call_dict['total_calls'] = len(fcalls)
    call_dict['stdcall'] = [line for line in fcalls if '__stdcall' in line.split()]
    call_dict['cdecl'] = [line for line in fcalls if '__cdecl' in line.split()]
    call_dict['fastcall'] = [line for line in fcalls if '__fastcall' in line.split()]
    call_dict['thiscall'] = [line for line in fcalls if '__thiscall' in line.split()]
    call_dict['stdcall_count'] = len(call_dict['stdcall'])
    call_dict['cdecl_count'] = len(call_dict['cdecl'])
    call_dict['fastcall_count'] = len(call_dict['fastcall'])
    call_dict['thiscall_count'] = len(call_dict['thiscall'])
    return call_dict


def get_dlls(comments):
    """ Returns a lowercase set of DLLs accessed by the file does not preserve
        order.  Remove set command to preserve redundency"""
    dlls = [line for line in comments if '.dll' in line.lower()]
    return list(set(line.split()[-1].lower() for line in dlls))

def _expert_comment_maker(doc):
    # removed check
    print('extracting expert comments from %s' % doc['id'])
    expert_comment_maker(doc)
    samples.save(doc)

def expert_comment_maker(document):
    document['dlls'] = get_dlls(document['ida_comments'])
    document['calls'] = get_calls(document['ida_comments'])


samples = asm_utils.get_collection(collection='test_samples')

all_files = samples.find()

num_cores = multiprocessing.cpu_count()
print('Running code on %d processors' % num_cores)
Parallel(n_jobs=num_cores)(
         delayed(_expert_comment_maker)(doc) for doc in all_files)
