import os, sys, json

class Model:
    """
        An abstraction of a machine learning model that contains the
        necessary parameters to be run as a standalone script.
    """

    def __init__(self, name, arguments, filename):
        """
            Creates a new Model object with the necessary
            parameters to be executed.

            Arguments:
            `name` : The name of the model.
            `arguments` : The list of arguments for the script
            `filename` : The PATH of the script.
        """
        self.name = name
        self.arguments = arguments
        self.filename = filename

    def run_model(self, input_file, output_file):
        """
            Runs the model in the input file given as argument.

            Arguments:
            `input_file` : file that contains the dataset.
        """
        import subprocess
        try:
            cmd = [self.filename]
            cmd.extend(self.arguments)
            subprocess.check_call(cmd)
        except:
            sys.stderr('Error 404: There was a problem running \
                                 model {0}'.format(self.name))


class MainPipeliner:
    """
        Runs all the models in the dataset and reports accuracy on
        each one of them. The user can configure which stats to
        show for the accuracy. The default shown is the log loss
        as it is the default on the MMCC.
    """

    def __init__(self, input_file=None, output_file=None):
        """
            Loads the config parameters from a file. This parameters
            include the input and output files, the models and
            probably [TODO: more input parameters]
        """

        self.config_file = 'config.json'
        self.file_contents = json.load(self.config_file)

        if input_file == None:
            input_file = self.file_contents['input_file'].strip()

        if output_file == None:
            output_file = self.file_contents['output_file'].strip()

        self.input_file = input_file
        self.output_file = output_file
        self.models = []

        if self.input_file == '' or self.output_file == '':
            raise Exception('No input or output file specified')

    def load_models(self):
        """
            Loads all the models from their respective files included
            on the json file. The specification of how to use this will
            be in TODO:HERE.
        """
        for m in self.file_contents['models']:
            arguments = []

            for arg in m['arguments']:
                arguments.extend(arg)

            self.models.append(Model(m['name'], arguments,
                                    m['filename']))


    def run_sequential(self):
        """
            Runs all the modules in one processor. The output
            is reported on the file specified on the configuration
            file.
        """
        for m in self.modules:






def main():






if __name__ == '__main__':
    main()
