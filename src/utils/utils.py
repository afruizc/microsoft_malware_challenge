"""Program utils for working with the assembly files"""

__author__ = "Aaron Gonzales, Andres Ruiz"
__license__ = "Apache"
__email__ = "agonzales@cs.unm.edu"


import os
import sys
import pymongo as pm


def open_asm(filename, path='/malware/data/all_data/train/'):
    """Reads all the lines in an assembly file correctly.
    Args:
        filename (str): the hash name of the file. e.g., "haa4945azkda09", no
                        path or extension
        path (str): the path of the file. Defaults to the sudo path
        returns:
            a list of all the decoded strings in bytecode format
    """
    datapath = path + filename + '.asm'
    with open(datapath, 'rb') as f:
        asm = [to_utf(line) for line in f.readlines()]
        return asm


def to_utf(line):
    """Converts a bytecode string to unicode. Ignores lines that have unicode
    decode errors.
    Args:
        line (string) a single line in the file
    Returns:
        a single line that's been cleaned
    """
    utf_line = ''
    try:
        utf_line = str(line, 'utf8')
        return utf_line
    except UnicodeDecodeError as u:
        # print(u)
        return None


def get_mongodb(db_address="64.106.46.105",
                username='query', password='malware_challenge'):
    """
    Returns the mongodb root database you specify from mongo
    Args:
        db_address (str): url for the machine on which the mongo instance
                    lives; defaults to the dept vm. passing 'andres' will go to
                    andres' machines
        username (string): username for mongo
        Password (string): default to the password
        collection ('string'): the collection you want.
    """
    if db_address == 'andres':
        db_address="afruizc-office.cs.unm.edu",

    mg = pm.MongoClient(db_address)
    if not mg.malware.authenticate(username, password):
        sys.stderr.write("Authentication error. Terminating...")
        sys.stderr.flush()
    # return the database
    return mg.malware


def get_collection(collection='samples'):
    """
    Returns the collection you specify from the default get_mongo(); defaults
    to samples.
    Args:
        collection ('string'): the collection you want.
    """
    mg = pm.MongoClient(db_address)
    return get_mongodb()[collection]


def get_inst(asm_file, asm_instr):
    """Gets the sequence of instructions in an assembly file
    Args:
        asm_file (list): The file's line list
        asm_inst (list): the list of common assembly instructions
    Returns:
        flat list of instructions
    """
    words = [line.split() for line in asm_file if line is not None]
    return [word for line in words for word in line if word in asm_instr]


def asm_seq_info(instr_seq):
    """Returns a dictionary of aggregated counts on the
        assembly instruction sequence"""
    return {'seq': instr_seq,
            'num_instr': len(instr_seq),
            'uniq_instr': list(set(instr_seq)),
            'num_uniq_instr': len(set(instr_seq))
            }
