#!/usr/bin/python

import json

class MalwareSample:
    def __init__(self, raw_object, label):
        """
            Creates a new malware sample that will mostly be
            used to store stuff in the mongo database. 

            Arguments:
            `raw_object`: the dictionary that stores the raw
                          data.
            `label`: The label of the current sample.
        """
        self.raw_object = raw_object
        self.label = label

    def _get_deepest_lvl(self, tree):
        """
            Calculates the deepest level on the process tree:

            Arguments:
            `tree`: the root of the tree.
        """
        if not tree.has_key('children'):
            return 0
        else:
            ans = 0
            for r in tree['children']:
                ans  = max(ans, 1 + self._get_deepest_lvl(r))
            return ans

    def _get_interaction_counts(self, enhanced):
        """
            Extracts the amount of reads, writes and executes
            from the enhanced attribute in the json file.

            Arguments:
            `enhanced`: The dict that contains the log of the actions

            retuns the counts for read, write, load in that order
        """
        from collections import defaultdict
        op_count = defaultdict(int)
        for l in enhanced:
            op_count[l['event']] += 1

        return op_count

    def _populate_fields(self):
        """
            Parse the raw json object extracting any features
            we want.
        """
        # First we start with network 
        ro = self.raw_object['network']
        self.udp_count = len(ro.get('udp', []))
        self.irc_count = len(ro.get('irc', []))
        self.http_count = len(ro.get('http', []))
        self.smtp_count = len(ro.get('smtp', []))
        self.tcp_count = len(ro.get('tcp', []))

        # Then from info
        ro = self.raw_object['info']
        self.duration = ro.get('duration', 0)

        # Then from target
        ro = self.raw_object['target']
        self.size = ro.get('size', 0)

        # Then from behavior
        ro = self.raw_object['behavior']

        self.number_processes = len(ro.get('processes', []))
        self.ptree_depth = max([self._get_deepest_lvl(x) 
                                    for x in ro['processtree']])

        op_count = self._get_interaction_counts(ro['enhanced'])
        print op_count
        for key, value in op_count.items():
            setattr(self, key+'_count', value)

        # This is done in order to not store the raw
        # object in the database
        del self.raw_object

    def save_to_database(self, collection):
        """
            Saves the current object to the database
            that was specified by the `client` connection

            Arguments:
            `collection`: A collection of a document on mongo that
            we will insert into.
        """
        if not hasattr(self, 'udp_count'):
            self._populate_fields()

        collection.insert(self.__dict__)

def main():
    import os
    import sys
    import argparse
    import getpass
    import urllib2
    from pymongo import MongoClient

    db_address = "afruizc-office.cs.unm.edu"

    parser = argparse.ArgumentParser()
    parser.add_argument("input_file", help="File or directory to be parsed \
                                            and uploaded to the database.")
    parser.add_argument("label", help="Class label for the file or the \
                                    directory. In case of being the latter, \
                                    the label is for all the json files in \
                                    the directory.")
    args = parser.parse_args()
    if os.path.isdir(args.input_file):
        json_files = filter(lambda x:x.endswith('.json'), 
                                os.listdir(args.input_file))
        json_files = map(lambda x:os.path.join(args.input_file, x), json_files)
        json_files = map(os.path.abspath, json_files)
    elif os.path.isfile(args.input_file):
        json_files = [os.path.abspath(args.input_file)]
    else:
        sys.stderr.write("Input file is not the right format. \
                            Terminating...")

    username = raw_input('db username: ')
    password = getpass.getpass()

    mg = MongoClient(db_address)
    if not mg.malware.authenticate(username, password):
        sys.stderr.write("Authentication error. Terminating...")
        sys.stderr.flush()
        return
    
    # Obtain the collection
    samples = mg.malware.samples
    for f_n in json_files:
        with open(f_n) as f:
            x = json.load(f)
            ms = MalwareSample(x, args.label)
            ms.save_to_database(samples)
        
if __name__ == '__main__':
    main()
