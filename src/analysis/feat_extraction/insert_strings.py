"""Program to insert the strings into the db"""

__author__ = "Aaron Gonzales"
__license__ = "Apache"
__email__ = "agonzales@cs.unm.edu"

import multiprocessing
from joblib import delayed, Parallel
import src.utils.utils as utils


def read_strings_file(name, stringpath = '../../../data/strings/train/'):
    try:
        with open(stringpath + name + '.strings', 'r') as f:
            return [line.strip() for line in f.readlines()]
    except FileNotFoundError:
        return []


def insert_string(doc):
    strings = read_strings_file(doc['id'])
    doc['strings']= {}
    doc['strings']['raw'] = strings
    malware.samples.save(doc)


def insert_raw_strings():
    global malware
    malware = utils.get_mongodb(username='populator')
    all_files = malware.samples.find()
    print('Running code on %d processors' % num_cores)
    Parallel(n_jobs=num_cores)(
             delayed(insert_string)(doc) for doc in all_files)



def _filter_strings(func_names, doc):
    """Untested"""
    print("filtering over %s" % doc['id'])
    # logic here isn't working
    doc['strings']['function_calls'] = [func for func in doc['strings']['raw']
                                        if func in func_names]
    collection.save(doc)


def filter_strings():
    with open('./windows_fnames.dict', 'r') as f:
       fnames = {name.strip() for name in f.readlines()}
    malware = utils.get_mongodb(username='populator')
    global collection
    collection = malware.samples
    all_files = collection.find({'strings': {'$exists': True}})
    Parallel(n_jobs=16)(
             delayed(_filter_strings)(fnames, doc) for doc in all_files)


