"""Program to insert the strings into the db"""

__author__ = "Aaron Gonzales"
__license__ = "Apache"
__email__ = "agonzales@cs.unm.edu"

import multiprocessing
from joblib import delayed, Parallel
import src.utils.utils as utils
import re

f_stopwords = {
    '#',
    '@',
    '!',
    '%',
    '$',
    '`',
    ' ',
    '*',
    '?',
    '<',
    '>',
    ':',
    '/',
    '\\'
    ',',
    '"',
    '\t',
    "'",
    ')',
    '(',
    '\\\\',
    '&',
    '[',
    ']',
    '_',
    '=',
    '-',
    ';',
    '^',
    ".",
    ",",
    ".",
    '+',
    '{',
    '}',
    '|'
    }


def read_strings_file(name, stringpath='../../../data/strings/test/'):
    try:
        with open(stringpath + name + '.strings', 'r') as f:
            return [line.strip() for line in f.readlines()]
    except FileNotFoundError:
        return []


def insert_string(doc):
    strings = read_strings_file(doc['id'])
    doc['strings'] = {}
    doc['strings']['raw'] = strings
    collection.save(doc)


def insert_raw_strings():
    global malware
    malware = utils.get_mongodb(username='populator')
    global collection
    collection = malware.test_samples
    all_files = collection.find()
    Parallel(n_jobs=16)(
             delayed(insert_string)(doc) for doc in all_files)


def filter_raw_string(raw_string):
    camel_case = re.compile('(^[A-Z][a-z]+)')
    nums = re.compile('^[a-zA-Z]+')
    cam_filter = filter(camel_case.search, raw_string)
    num_filter = filter(nums.search, cam_filter)
    len_filter = filter(lambda x: len(x) > 5, num_filter)
    fin = []
    for word in len_filter:
        flag = False
        for s in f_stopwords:
            if s in word:
                flag = True
                break
        if flag is False:
            fin.append(word)
    return fin


def _filter_strings(func_names, doc):
    """Untested"""
    print("filtering over %s" % doc['id'])
    # logic here isn't working
    if 'strings' in doc.keys():
        if 'raw' in doc['strings'].keys():
            doc['strings']['function_calls'] = filter_raw_string(doc['strings']['raw'])
            collection.save(doc)
            doc['strings']['dlls'] = [dll.lower() for dll in doc['strings']['raw']
                                      if 'dll' in dll or 'DLL' in dll]
            collection.save(doc)


def filter_strings():
    with open('./windows_fnames.dict', 'r') as f:
        fnames = {name.strip() for name in f.readlines()}
    malware = utils.get_mongodb(username='populator')
    global collection
    collection = malware.test_samples
    all_files = collection.find({'strings': {'$exists': True}})
    Parallel(n_jobs=16)(delayed(_filter_strings)(fnames, doc) for doc in all_files)

