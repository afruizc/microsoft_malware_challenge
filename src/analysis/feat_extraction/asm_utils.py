"""Program utils for working with the assembly files"""

__author__ = "Aaron Gonzales, Andres Ruiz"
__license__ = "Apache"
__email__ = "agonzales@cs.unm.edu"


import os, sys
import pymongo as pm


def open_asm(filename):
    """Reads all the lines in an assembly file correctly.
    Args:
        filename (str): the hash name of the file. e.g., "haa4945azkda09", no
                        path or extension
        returns:
            a list of all the decoded strings in bytecode format
    """
    # datapath = '/Users/carlyhendrickson/git/microsoft_malware_challenge/data/train/' + filename + '.asm'
    # datapath = '/nfs/research/agonzales/git/microsoft_malware_challenge/data/train/' + filename + '.asm'
    # datapath = '/home/afruizc/Documents/hacks/microsoft_malware_challenge/mmc_data/all_data/train/' + filename + '.asm'
    datapath = '/home/afruizc/Documents/hacks/microsoft_malware_challenge/data/all_data/train/' + filename + '.asm'
    with open(datapath, 'rb') as f:
        asm = [to_utf(line) for line in f.readlines()]
        return asm

def open_asm2(filename):
    """
    Same as `open_asm` only assming `filename` is a relative path
    """
    datapath = os.path.abspath(filename + '.asm')
    with open(datapath, 'rb') as f:
        asm = [line for line in f.readlines()]
        return asm


def to_utf(line):
    """Converts a bytecode string to unicode. Ignores lines that have unicode
    decode errors.
    Args:
        line (string) a single line in the file
    Returns:
        a single line that's been cleaned
    """
    utf_line = ''
    try:
        utf_line = str(line, 'utf8')
        return utf_line
    except UnicodeDecodeError as u:
        # print(u)
        return None


def read_assembly(filename):
    """ Reads an assembly file and returns a nice UTF version of it.
    Args:
        filename (str) root of the file's filename, no extension
    Returns:
        list of all lines in the file
    """
    return open_asm(filename)
    # asm = [to_utf(line) for line in my_asm]


def get_collection(db_address="afruizc-office.cs.unm.edu",
                   username='populator', password='malware_challenge',
                   collection='samples'):
    """Returns the collection you specify; defaults to samples"""
    mg = pm.MongoClient(db_address)
    if not mg.malware.authenticate(username, password):
        sys.stderr.write("Authentication error. Terminating...")
        sys.stderr.flush()
    # Obtain the collection
    return mg.malware[collection]


def get_inst(asm_file, asm_instr):
    """Gets the sequence of instructions in an assembly file
    Args:
        asm_file (list): The file's line list
        asm_inst (list): the list of common assembly instructions
    Returns:
        flat list of instructions
    """
    words = [line.split() for line in asm_file if line is not None]
    return [word for line in words for word in line if word in asm_instr]


def asm_seq_info(instr_seq):
    """Returns a dictionary of aggregated counts on the
        assembly instruction sequence"""
    return {'seq': instr_seq,
            'num_instr': len(instr_seq),
            'uniq_instr': list(set(instr_seq)),
            'num_uniq_instr': len(set(instr_seq))
            }
